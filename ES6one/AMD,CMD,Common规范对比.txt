1.名词解释
     	AMD：Asynchronous Modules Definition异步模块定义，提供定义模块及异步加载该模块依赖的机制。

   	 CMD：Common Module Definition 通用模块定义，提供模块定义及按需执行模块

    	 RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。
2.AMD 提前执行：提前异步并行加载
	优点：尽早执行依赖可以尽早发现错误；缺点：容易产生浪费

3.CMD延迟执行：延迟按需加载
	优点：减少资源浪费 缺点：等待时间长、出错时间延后

2.1 AMD与CMD代码模式
	AMD代码模式-运行策略
define(['./a', './b'], function(a, b) { //运行至此，a.js和b.js已经下载完成 a模块和b模块已经执行完，直接可用；
    a.doing();
    // 此处省略500行代码
    b.doing();
});

CMD代码模式-运行策略

define(function(require, exports, module) {
     var a = require("./a"); //等待a.js下载、执行完
     a.doing();
     // 此处省略500行代码
     var b = require("./b"); //依赖就近书写
     b.doing();
});

3.   AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。
CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。

方案 | 优势 | 劣势 | 特点
AMD | 速度快 | 会浪费资源 | 预先加载所有的依赖，直到使用的时候才执行
CMD | 只有真正需要才加载依赖 | 性能较差 | 直到使用的时候才定义依赖

它们除了希望放在浏览器作为loader也能够放在服务端，提供加载功能。在我看来，AMD擅长在浏览器端、CMD擅长在服务器端。这是因为浏览器加载一个功能不像服务器那么快，有大量的网络消耗。所以一个异步loader是更接地气的。

或者，干脆使用YUI3的模块机制，在上线前进行压制。把互相依赖的模块压在一个文件中。

CommonJS
	CommonJS 是一个有志于构建 JavaScript 生态圈的组织。整个社区致力于提高 JavaScript 程序的可移植性和可交换性，无论是在服务端还是浏览器端
		
	一个有目标的构建JavaScript生态系统Web服务器组，在浏览器和命令行应用程序和桌面。





		js模块化的规范
amd 和 cmd 和 commonjs


amd ―>requirejs 
依赖前置。提前执行。但requirejs从2.0也可以延时执行。 

定义模块的时候需要制定依赖模块，并以形参的方式引入factory中



cmd ―>seajs 
依赖就近。延时执行。按需加载，定义一个模块的时候不需要立即制定依赖模块，在需要的时候require就可以了。



commonjs ―>nodejs 
commonjs是服务器端模块化的规范。Nodejs采用了这个规范。
 
一个单独文件就是一个模块，每个模块都是一个单独的作用域。也就是说，在该模块内部定义的变量，无法被其它模块读取，除非定义为global对象的属性。 

commonjs规范加载模块是同步的，只有加载完成，才能执行后面的操作。 
AMD规范是异步加载，允许指定回调函数。
由于nodejs主要用于服务端编程，模块文件一般都已经存在与本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以commonjs规范比较适用。 

但是，如果是浏览器环境，要从服务器加载模块，就必须采用异步模式，因此浏览器端一般采用AMD规范。
 

		

